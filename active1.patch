From 7f6a392097af50be240b82493b09451b62b8ef49 Mon Sep 17 00:00:00 2001
From: Alexander Martinz <eviscerationls@gmail.com>
Date: Mon, 30 Sep 2013 21:45:16 +0200
Subject: [PATCH] Add Active Display (1/2)

Change-Id: I96a1338176c9ae2cf111653df31d95637dc31e68
---
 .gitignore                                         |    2 +
 core/java/android/provider/Settings.java           |   54 +
 .../internal/widget/multiwaveview/GlowPadView.java |   57 +-
 core/res/res/values/dimens.xml                     |    9 +
 core/res/res/values/symbols.xml                    |    3 +
 packages/SystemUI/AndroidManifest.xml              |  134 +--
 packages/SystemUI/SystemUI.iml                     |   18 +
 .../ic_ad_dismiss_notification_activated.png       |  Bin 0 -> 12949 bytes
 .../ic_ad_dismiss_notification_normal.png          |  Bin 0 -> 5192 bytes
 .../res/drawable-hdpi/ic_ad_morenotifications.png  |  Bin 0 -> 517 bytes
 .../ic_handle_notification_normal.png              |  Bin 0 -> 22107 bytes
 .../drawable/ad_active_notification_background.xml |   26 +
 .../res/drawable/ic_ad_dismiss_notification.xml    |   36 +
 .../res/layout-land/active_display_content.xml     |  124 +++
 .../res/layout-sw600dp/active_display_content.xml  |  116 +++
 packages/SystemUI/res/layout/active_display.xml    |   17 +
 .../SystemUI/res/layout/active_display_content.xml |  116 +++
 .../SystemUI/res/layout/glow_pad_container.xml     |   25 +
 packages/SystemUI/res/layout/glow_pad_view.xml     |   44 +
 packages/SystemUI/res/values/dimens.xml            |   32 +-
 packages/SystemUI/res/values/donottranslate.xml    |    1 +
 packages/SystemUI/res/values/styles.xml            |    6 +
 .../android/systemui/statusbar/BaseStatusBar.java  |   68 +-
 .../systemui/statusbar/phone/PhoneStatusBar.java   |    8 +-
 .../policy/activedisplay/ActiveDisplayView.java    | 1047 ++++++++++++++++++++
 .../statusbar/policy/activedisplay/ClockView.java  |  293 ++++++
 .../policy/activedisplay/DummyActivity.java        |   37 +
 .../systemui/statusbar/tablet/TabletStatusBar.java |    2 +
 packages/SystemUI/tests/Android.mk                 |   30 -
 packages/SystemUI/tests/AndroidManifest.xml        |   31 -
 packages/SystemUI/tests/res/layout/main.xml        |   32 -
 .../screenshot/ScreenshotStubActivity.java         |   33 -
 .../systemui/screenshot/ScreenshotTest.java        |  137 ---
 33 files changed, 2197 insertions(+), 341 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 packages/SystemUI/SystemUI.iml
 create mode 100644 packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_activated.png
 create mode 100644 packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_normal.png
 create mode 100644 packages/SystemUI/res/drawable-hdpi/ic_ad_morenotifications.png
 create mode 100644 packages/SystemUI/res/drawable-hdpi/ic_handle_notification_normal.png
 create mode 100644 packages/SystemUI/res/drawable/ad_active_notification_background.xml
 create mode 100644 packages/SystemUI/res/drawable/ic_ad_dismiss_notification.xml
 create mode 100644 packages/SystemUI/res/layout-land/active_display_content.xml
 create mode 100644 packages/SystemUI/res/layout-sw600dp/active_display_content.xml
 create mode 100644 packages/SystemUI/res/layout/active_display.xml
 create mode 100644 packages/SystemUI/res/layout/active_display_content.xml
 create mode 100644 packages/SystemUI/res/layout/glow_pad_container.xml
 create mode 100644 packages/SystemUI/res/layout/glow_pad_view.xml
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ActiveDisplayView.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ClockView.java
 create mode 100644 packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/DummyActivity.java
 delete mode 100644 packages/SystemUI/tests/Android.mk
 delete mode 100644 packages/SystemUI/tests/AndroidManifest.xml
 delete mode 100644 packages/SystemUI/tests/res/layout/main.xml
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
 delete mode 100644 packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9fbad9d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+packages/SystemUI/gen/
+packages/SystemUI/tests/
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index e9d553b..fc4addb 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -2539,6 +2539,60 @@ public static void setShowGTalkServiceStatusForUser(ContentResolver cr, boolean
         public static final String LOCKSCREEN_TARGETS = "lockscreen_targets";
 
         /**
+         * Whether to display notifications on screen when screen is off
+         * @hide
+         */
+        public static final String ENABLE_ACTIVE_DISPLAY = "enable_active_display";
+
+        /**
+         * Whether to display notification messages around ring
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_TEXT = "active_display_text";
+
+        /**
+         * Time to redisplay notifications on screen from when screen turns off, 0 = never redisplay
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_REDISPLAY = "active_display_redisplay";
+
+        /**
+         * Brightness of the display when displaying the active display view
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_BRIGHTNESS = "active_display_brightness";
+
+        /**
+         * Display active display view when device comes out of the user's pocket, etc...
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_POCKET_MODE = "active_display_pocket_mode";
+
+        /**
+         * Whether to include ongoing/non-clearable notifications
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_ALL_NOTIFICATIONS = "active_display_all_notifications";
+
+        /**
+         * Whether to display AM/PM after time when in 12h format
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_SHOW_AMPM = "active_display_show_ampm";
+
+        /**
+         * Whether to display the date above the time
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_SHOW_DATE = "active_display_show_date";
+
+       /**
+         * Whether to invert the colors when in bright light
+         * @hide
+         */
+        public static final String ACTIVE_DISPLAY_SUNLIGHT_MODE = "active_display_sunlight_mode";
+
+        /**
         * Whether music controls should be shown on the lockscreen if a supporting
         * music player is active.
         * @hide
diff --git a/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java b/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
index 6cbab94..86b5c7f 100644
--- a/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
+++ b/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java
@@ -31,10 +31,15 @@
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
 import android.graphics.drawable.Drawable;
+import android.graphics.Paint;
+import android.graphics.Paint.Align;
+import android.graphics.Path;
+import android.graphics.RectF;
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.os.Vibrator;
 import android.provider.Settings;
+import android.text.TextPaint;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.util.Log;
@@ -46,6 +51,7 @@
 
 import com.android.internal.R;
 
+import java.lang.Math;
 import java.util.ArrayList;
 
 /**
@@ -127,6 +133,8 @@
     private static final float TARGET_SCALE_COLLAPSED = 0.8f;
     private static final float RING_SCALE_EXPANDED = 1.0f;
     private static final float RING_SCALE_COLLAPSED = 0.5f;
+    private static final float HANDLE_TEXT_RADIUS = 120f;
+    private static final float MAX_TEXT_ARC_RADIANS = (float) (270.0 / 170.0 * Math.PI);
 
     private ArrayList<TargetDrawable> mTargetDrawables = new ArrayList<TargetDrawable>();
     private AnimationBundle mWaveAnimations = new AnimationBundle();
@@ -150,6 +158,12 @@
     private int mMaxTargetWidth;
     private float mRingScaleFactor = 1f;
     private boolean mAllowScaling;
+    private boolean mDrawOuterRing = true;
+
+    private Paint mPaintText;
+    private String mHandleText = "";
+    private int mTextRadius;
+    private float mMaxTextArcLength;
 
     private float mOuterRadius = 0.0f;
     private float mSnapMargin = 0.0f;
@@ -318,6 +332,16 @@ public GlowPadView(Context context, AttributeSet attrs) {
         mPointCloud = new PointCloud(pointDrawable);
         mPointCloud.makePointCloud(mInnerRadius, mOuterRadius);
         mPointCloud.glowManager.setRadius(mGlowRadius);
+
+        mPaintText = new Paint();
+        mPaintText.setAntiAlias(true);
+        mPaintText.setColor(res.getColor(android.R.color.white));
+        mPaintText.setTextAlign(Align.CENTER);
+        mPaintText.setStyle(Paint.Style.FILL_AND_STROKE);
+        mPaintText.setFakeBoldText(true);
+        mPaintText.setTextSize(res.getDimensionPixelSize(R.dimen.glowpad_notification_font_size));
+        mTextRadius = res.getDimensionPixelSize(R.dimen.glowpad_notification_text_radius);
+        mMaxTextArcLength = mTextRadius * MAX_TEXT_ARC_RADIANS;
     }
 
     private int getResourceId(TypedArray a, int id) {
@@ -406,6 +430,7 @@ private void switchToState(int state, float x, float y) {
                 startBackgroundAnimation(0, 0.0f);
                 mHandleDrawable.setState(TargetDrawable.STATE_INACTIVE);
                 mHandleDrawable.setAlpha(1.0f);
+		mPaintText.setAlpha(255);
                 break;
 
             case STATE_START:
@@ -413,6 +438,7 @@ private void switchToState(int state, float x, float y) {
                 break;
 
             case STATE_FIRST_TOUCH:
+		mPaintText.setAlpha(0);
                 mHandleDrawable.setAlpha(0.0f);
                 deactivateTargets();
                 showTargets(true);
@@ -424,12 +450,14 @@ private void switchToState(int state, float x, float y) {
                 break;
 
             case STATE_TRACKING:
+		mPaintText.setAlpha(0);
                 mHandleDrawable.setAlpha(0.0f);
                 showGlow(REVEAL_GLOW_DURATION , REVEAL_GLOW_DELAY, 1.0f, null);
                 break;
 
             case STATE_SNAP:
                 // TODO: Add transition states (see list_selector_background_transition.xml)
+		mPaintText.setAlpha(0);
                 mHandleDrawable.setAlpha(0.0f);
                 showGlow(REVEAL_GLOW_DURATION , REVEAL_GLOW_DELAY, 0.0f, null);
                 break;
@@ -1262,7 +1290,7 @@ private void updatePointCloudPosition(float centerX, float centerY) {
     @Override
     protected void onDraw(Canvas canvas) {
         mPointCloud.draw(canvas);
-        mOuterRing.draw(canvas);
+        if (mDrawOuterRing) mOuterRing.draw(canvas);
         final int ntargets = mTargetDrawables.size();
         for (int i = 0; i < ntargets; i++) {
             TargetDrawable target = mTargetDrawables.get(i);
@@ -1271,6 +1299,33 @@ protected void onDraw(Canvas canvas) {
             }
         }
         mHandleDrawable.draw(canvas);
+
+        if (!TextUtils.isEmpty(mHandleText) && mPaintText.getAlpha() != 0) {
+            float x = mHandleDrawable.getPositionX();
+            float y = mHandleDrawable.getPositionY();
+            Path circle = new Path();
+            circle.addCircle(x, y, mTextRadius, Path.Direction.CW);
+            canvas.rotate(90f, x, y);
+            canvas.drawTextOnPath(mHandleText, circle, 0, 0, mPaintText);
+        }
+    }
+
+    public void setHandleDrawable(TargetDrawable d) {
+        float x = mHandleDrawable.getPositionX();
+        float y = mHandleDrawable.getPositionY();
+        mHandleDrawable = new TargetDrawable(d);
+        mHandleDrawable.setPositionX(x);
+        mHandleDrawable.setPositionY(y);
+    }
+
+    public void setHandleText(String text) {
+        mHandleText = TextUtils.ellipsize(
+                text, new TextPaint(mPaintText), mMaxTextArcLength,
+                TextUtils.TruncateAt.END).toString();
+    }
+
+    public void setDrawOuterRing(boolean drawOuterRing) {
+        mDrawOuterRing = drawOuterRing;
     }
 
     public void setOnTriggerListener(OnTriggerListener listener) {
diff --git a/core/res/res/values/dimens.xml b/core/res/res/values/dimens.xml
index 898b640..e3ba4a0 100644
--- a/core/res/res/values/dimens.xml
+++ b/core/res/res/values/dimens.xml
@@ -362,4 +362,13 @@
 
     <!-- Pie service: Thickness of the active trigger fields around the screen border -->
     <dimen name="pie_trigger_thickness">12dp</dimen>
+
+    <!-- Font size for notification text -->
+    <dimen name="glowpad_notification_font_size">12dp</dimen>
+
+    <!-- Radius of notification text -->
+    <dimen name="glowpad_notification_text_radius">60dp</dimen>
+
+    <!-- Top margin for overflow notifications shown in the ActiveDisplay view -->
+    <dimen name="glowpad_overflow_notifications_margin_top">48dp</dimen>
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index 9efa842..52f7a7a 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -1289,6 +1289,9 @@
   <java-symbol type="dimen" name="kg_squashed_layout_threshold" />
   <java-symbol type="dimen" name="kg_small_widget_height" />
   <java-symbol type="dimen" name="lockscreen_target_inset" />
+  <java-symbol type="dimen" name="glowpad_notification_font_size" />
+  <java-symbol type="dimen" name="glowpad_notification_text_radius" />
+  <java-symbol type="dimen" name="glowpad_overflow_notifications_margin_top" />
   <java-symbol type="dimen" name="lockscreen_target_icon_file_inset" />
   <java-symbol type="drawable" name="ic_jog_dial_sound_off" />
   <java-symbol type="drawable" name="ic_jog_dial_sound_on" />
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 0f7fa64..8faedbb 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -1,7 +1,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
-        package="com.android.systemui"
-        coreApp="true">
+    xmlns:androidprv="http://schemas.android.com/apk/prv/res/android"
+    package="com.android.systemui"
+    android:sharedUserId="android.uid.system"
+    coreApp="true">
 
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
@@ -60,7 +61,7 @@
     <uses-permission android:name="android.permission.INTERACT_ACROSS_USERS_FULL" />
     <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES" />
     <uses-permission android:name="android.permission.GET_TOP_ACTIVITY_INFO" />
-    
+
     <!-- WindowManager -->
     <uses-permission android:name="android.permission.INTERNAL_SYSTEM_WINDOW" />
     <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
@@ -91,50 +92,57 @@
              up everything else.
              TODO: Should have an android:permission attribute
              -->
-        <service android:name="SystemUIService"
-            android:exported="true"
-            />
+        <service
+            android:name="SystemUIService"
+            android:exported="true" />
 
         <!-- started from PhoneWindowManager
              TODO: Should have an android:permission attribute -->
-        <service android:name=".screenshot.TakeScreenshotService"
+        <service
+            android:name=".screenshot.TakeScreenshotService"
             android:process=":screenshot"
             android:exported="false" />
 
-        <receiver android:name=".screenshot.TrashScreenshot"
-                android:exported="true" />
+        <receiver
+            android:name=".screenshot.TrashScreenshot"
+            android:exported="true" />
 
-        <service android:name=".LoadAverageService"
-                android:exported="true" />
+        <service
+            android:name=".LoadAverageService"
+            android:exported="true" />
 
-        <service android:name=".ImageWallpaper"
-                android:permission="android.permission.BIND_WALLPAPER"
-                android:exported="true" />
+        <service
+            android:name=".ImageWallpaper"
+            android:permission="android.permission.BIND_WALLPAPER"
+            android:exported="true" />
 
-        <receiver android:name=".BootReceiver" androidprv:primaryUserOnly="true">
+        <receiver
+            android:name=".BootReceiver"
+            androidprv:primaryUserOnly="true">
             <intent-filter>
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
         </receiver>
 
-        <activity android:name=".usb.UsbStorageActivity"
-                  android:label="@*android:string/usb_storage_activity_title"
-                  android:excludeFromRecents="true">
-        </activity>
-        <activity android:name="com.android.internal.app.ExternalMediaFormatActivity"
-                android:theme="@*android:style/Theme.Dialog.Alert"
-                android:excludeFromRecents="true">
-        </activity>
+        <activity
+            android:name=".usb.UsbStorageActivity"
+            android:label="@*android:string/usb_storage_activity_title"
+            android:excludeFromRecents="true"></activity>
+        <activity
+            android:name="com.android.internal.app.ExternalMediaFormatActivity"
+            android:theme="@*android:style/Theme.Dialog.Alert"
+            android:excludeFromRecents="true"></activity>
 
-        <activity android:name=".recent.RecentsActivity"
-                android:label="@string/accessibility_desc_recent_apps"
-                android:theme="@style/RecentsStyle"
-                android:excludeFromRecents="true"
-                android:launchMode="singleInstance"
-                android:exported="true">
-          <intent-filter>
-            <action android:name="com.android.systemui.TOGGLE_RECENTS" />
-          </intent-filter>
+        <activity
+            android:name=".recent.RecentsActivity"
+            android:label="@string/accessibility_desc_recent_apps"
+            android:theme="@style/RecentsStyle"
+            android:excludeFromRecents="true"
+            android:launchMode="singleInstance"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="com.android.systemui.TOGGLE_RECENTS" />
+            </intent-filter>
         </activity>
 
         <receiver
@@ -147,48 +155,48 @@
         </receiver>
 
         <!-- started from UsbDeviceSettingsManager -->
-        <activity android:name=".usb.UsbConfirmActivity"
+        <activity
+            android:name=".usb.UsbConfirmActivity"
             android:exported="true"
             android:permission="android.permission.MANAGE_USB"
             android:theme="@*android:style/Theme.Holo.Dialog.Alert"
             android:finishOnCloseSystemDialogs="true"
-            android:excludeFromRecents="true">
-        </activity>
+            android:excludeFromRecents="true"></activity>
 
         <!-- started from UsbDeviceSettingsManager -->
-        <activity android:name=".usb.UsbPermissionActivity"
+        <activity
+            android:name=".usb.UsbPermissionActivity"
             android:exported="true"
             android:permission="android.permission.MANAGE_USB"
             android:theme="@*android:style/Theme.Holo.Dialog.Alert"
             android:finishOnCloseSystemDialogs="true"
-            android:excludeFromRecents="true">
-        </activity>
+            android:excludeFromRecents="true"></activity>
 
         <!-- started from UsbDeviceSettingsManager -->
-        <activity android:name=".usb.UsbResolverActivity"
+        <activity
+            android:name=".usb.UsbResolverActivity"
             android:exported="true"
             android:permission="android.permission.MANAGE_USB"
             android:theme="@*android:style/Theme.Holo.Dialog.Alert"
             android:finishOnCloseSystemDialogs="true"
-            android:excludeFromRecents="true">
-        </activity>
+            android:excludeFromRecents="true"></activity>
 
         <!-- started from UsbDeviceSettingsManager -->
-        <activity android:name=".usb.UsbAccessoryUriActivity"
+        <activity
+            android:name=".usb.UsbAccessoryUriActivity"
             android:exported="true"
             android:permission="android.permission.MANAGE_USB"
             android:theme="@*android:style/Theme.Holo.Dialog.Alert"
             android:finishOnCloseSystemDialogs="true"
-            android:excludeFromRecents="true">
-        </activity>
+            android:excludeFromRecents="true"></activity>
 
         <!-- started from UsbDebuggingManager -->
-        <activity android:name=".usb.UsbDebuggingActivity"
+        <activity
+            android:name=".usb.UsbDebuggingActivity"
             android:permission="android.permission.MANAGE_USB"
             android:theme="@*android:style/Theme.Holo.Dialog.Alert"
             android:finishOnCloseSystemDialogs="true"
-            android:excludeFromRecents="true">
-        </activity>
+            android:excludeFromRecents="true"></activity>
 
         <!-- started from NetworkPolicyManagerService -->
         <activity
@@ -213,9 +221,10 @@
             android:excludeFromRecents="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="com.android.internal.category.PLATLOGO" />
-<!--            <category android:name="android.intent.category.LAUNCHER" />-->
+                <!--            <category android:name="android.intent.category.LAUNCHER" />-->
             </intent-filter>
         </activity>
 
@@ -224,8 +233,7 @@
             android:name=".BeanBagDream"
             android:exported="true"
             android:label="@string/jelly_bean_dream_name"
-            android:enabled="false"
-            >
+            android:enabled="false">
             <intent-filter>
                 <action android:name="android.service.dreams.DreamService" />
                 <category android:name="android.intent.category.DEFAULT" />
@@ -235,22 +243,23 @@
                 android:resource="@xml/dream_info" />
         </service>
 
-        <activity android:name=".BeanBagDreamSettings"
-                android:taskAffinity=""
-                android:excludeFromRecents="true"
-                android:exported="true">
+        <activity
+            android:name=".BeanBagDreamSettings"
+            android:taskAffinity=""
+            android:excludeFromRecents="true"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
             </intent-filter>
         </activity>
 
-        <activity android:name=".Somnambulator"
+        <activity
+            android:name=".Somnambulator"
             android:label="@string/start_dreams"
             android:icon="@mipmap/ic_launcher_dreams"
             android:theme="@android:style/Theme.Wallpaper.NoTitleBar"
             android:exported="true"
-            android:excludeFromRecents="true"
-            >
+            android:excludeFromRecents="true">
             <!--
             <intent-filter>
                 <action android:name="android.intent.action.CREATE_SHORTCUT" />
@@ -259,9 +268,18 @@
             -->
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.DESK_DOCK" />
             </intent-filter>
         </activity>
+
+        <activity
+            android:name=".statusbar.policy.activedisplay.DummyActivity"
+            android:label=""
+            android:taskAffinity=""
+            android:excludeFromRecents="true"
+            android:exported="true"
+            android:theme="@style/Theme.DummyActivity"></activity>
     </application>
 </manifest>
diff --git a/packages/SystemUI/SystemUI.iml b/packages/SystemUI/SystemUI.iml
new file mode 100644
index 0000000..8654195
--- /dev/null
+++ b/packages/SystemUI/SystemUI.iml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android" name="Android">
+      <configuration />
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API -18 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
+
diff --git a/packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_activated.png b/packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_activated.png
new file mode 100644
index 0000000000000000000000000000000000000000..fc57660662806c42bbf38b3dabebecec83677533
GIT binary patch
literal 12949
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
OfTYFc#mYqVeEtV6A_3e0

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_normal.png b/packages/SystemUI/res/drawable-hdpi/ic_ad_dismiss_notification_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..90aebbba99de9d24f6c3812f13ee15cda701e4c2
GIT binary patch
literal 5192
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/ic_ad_morenotifications.png b/packages/SystemUI/res/drawable-hdpi/ic_ad_morenotifications.png
new file mode 100644
index 0000000000000000000000000000000000000000..17c40ab5f17e4508077e189feebcfbb2ae0b8afe
GIT binary patch
literal 517
zcmV+g0{Z=lP)<h;3K|Lk000e1NJLTq001Na001Ni1^@s6;Q*MJ0005ZNkl<Zc%1E(
zKd#z95XQfqu>ea*evV^_A~zrv2cV3&0JO<9s1Oy`NLo&S(!l{}B2JJ7$+7$_A<RRb
z*%Z%4{7aOi$xF09X*Ke!=kttab`3Zj4u`|>pTf*{{X}$H#+aLZW6Z@nzoY#kxh)Yu
z7={>+$7V8_5D`IDQQLmMubocE#&L}Ke9lRdT*St4jL~Q$Ns?f@-I~>Eb)zwzPIWe$
z*(}R$zU^H*nAzlcZkNmDn>0;7h)B-NTnW;8z5YBH488<G;B7XW_l-v50f1KFbUYp(
zyWQ@mJkQI;V)3@u>%CJ|B_fE3Fmo^*4nO93{*{@Hh}fSd1i+}OP1Dr#egCz!mW(lV
z)5%)f-0gNyRkT{Ihi0=Go+m^^$g&Lk{T|lZrtkZweQT{4V_v0c>ZvN2*#Njm=>F6J
z@I21~5D`%TTH9KHnW3t+@3d4^&xY2X$5vJ<?YsOip})nwmH`0DvNQmgnF#<@RTHX%
zAR^EGxh#r^h(x4*HfOP5W($BT?O#sF5)q;(DvP4{c0JU_n5TBTjUWhcI2<0IyLLI$
zVHno;)KgIu+0{^M6h&oqN8PmU#U1;92lwl6I2;a#<IngG<*W~6b1AKZ00000NkvXX
Hu0mjfY*F-3

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable-hdpi/ic_handle_notification_normal.png b/packages/SystemUI/res/drawable-hdpi/ic_handle_notification_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..d8fa6173bc808237af333bce8b396497d22c0918
GIT binary patch
literal 22107
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

literal 0
HcmV?d00001

diff --git a/packages/SystemUI/res/drawable/ad_active_notification_background.xml b/packages/SystemUI/res/drawable/ad_active_notification_background.xml
new file mode 100644
index 0000000..18a8c70
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ad_active_notification_background.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+/*
+ * Copyright (C) 2013 Clark Scheff
+ *
+ * Licensed under the GNU GPLv2 license
+ *
+ * The text of the license can be found in the LICENSE file
+ * or at https://www.gnu.org/licenses/gpl-2.0.txt
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <stroke
+        android:color="#ff606060"
+        android:width="2dp" />
+    <corners
+        android:radius="2dp" />
+</shape>
\ No newline at end of file
diff --git a/packages/SystemUI/res/drawable/ic_ad_dismiss_notification.xml b/packages/SystemUI/res/drawable/ic_ad_dismiss_notification.xml
new file mode 100644
index 0000000..ef94089
--- /dev/null
+++ b/packages/SystemUI/res/drawable/ic_ad_dismiss_notification.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:state_enabled="true"
+        android:state_active="false"
+        android:state_focused="false"
+        android:drawable="@drawable/ic_ad_dismiss_notification_normal" />
+
+    <item
+        android:state_enabled="true"
+        android:state_active="true"
+        android:state_focused="false"
+        android:drawable="@drawable/ic_ad_dismiss_notification_activated" />
+
+    <item
+        android:state_enabled="true"
+        android:state_active="false"
+        android:state_focused="true"
+        android:drawable="@drawable/ic_ad_dismiss_notification_activated" />
+
+</selector>
diff --git a/packages/SystemUI/res/layout-land/active_display_content.xml b/packages/SystemUI/res/layout-land/active_display_content.xml
new file mode 100644
index 0000000..a0afac3
--- /dev/null
+++ b/packages/SystemUI/res/layout-land/active_display_content.xml
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- This is the selector widget that allows the user to select an action. -->
+<FrameLayout
+    xmlns:prvandroid="http://schemas.android.com/apk/prv/res/android"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/porn_notification_view"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:background="#ff000000">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:weightSum="2"
+        android:orientation="horizontal" >
+
+        <FrameLayout
+            android:id="@+id/remote_content_parent"
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1">
+
+            <com.android.systemui.statusbar.policy.activedisplay.ClockView
+                android:id="@+id/clock_view"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:gravity="center" >
+
+                <TextView
+                    android:id="@+id/date"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginBottom="-12dp"
+                    android:singleLine="true"
+                    android:ellipsize="none"
+                    android:textSize="@dimen/ad_date_font_size"
+                    android:textAppearance="?android:attr/textAppearanceSmall"
+                    android:textColor="@android:color/white"
+                    android:textAllCaps="true" />
+                <TextView
+                    android:id="@+id/clock_text"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:singleLine="true"
+                    android:ellipsize="none"
+                    android:textSize="@dimen/ad_clock_font_size"
+                    android:textAppearance="?android:attr/textAppearanceMedium"
+                    android:textColor="@android:color/white"
+                    android:layout_below="@id/date" />
+                <TextView
+                    android:id="@+id/am_pm"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:singleLine="true"
+                    android:ellipsize="none"
+                    android:textSize="@dimen/ad_ampm_font_size"
+                    android:textAppearance="?android:attr/textAppearanceSmall"
+                    android:textColor="@android:color/white"
+                    android:layout_toEndOf="@id/clock_text"
+                    android:layout_alignBaseline="@id/clock_text"/>
+            </com.android.systemui.statusbar.policy.activedisplay.ClockView>
+
+            <View
+                android:id="@+id/notification_remote_view"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content" />
+
+        </FrameLayout>
+        <RelativeLayout
+            android:layout_width="0dp"
+            android:layout_height="match_parent"
+            android:layout_weight="1" >
+
+            <include layout="@layout/glow_pad_view" />
+
+            <ImageView
+                android:id="@+id/current_notification_icon"
+                android:layout_width="@dimen/handle_icon_size"
+                android:layout_height="@dimen/handle_icon_size"
+                android:layout_centerInParent="true"
+                android:scaleType="fitCenter" />
+
+            <View
+                android:id="@+id/anchor"
+                android:layout_width="0dp"
+                android:layout_height="0dp"
+                android:layout_centerInParent="true"/>
+
+            <LinearLayout
+                android:id="@+id/keyguard_other_notifications"
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/anchor"
+                android:layout_centerHorizontal="true"
+                android:layout_marginTop="@dimen/glowpad_overflow_notifications_margin_top" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+</FrameLayout>
+
diff --git a/packages/SystemUI/res/layout-sw600dp/active_display_content.xml b/packages/SystemUI/res/layout-sw600dp/active_display_content.xml
new file mode 100644
index 0000000..0dd5bd2
--- /dev/null
+++ b/packages/SystemUI/res/layout-sw600dp/active_display_content.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- This is the selector widget that allows the user to select an action. -->
+<FrameLayout
+    xmlns:prvandroid="http://schemas.android.com/apk/prv/res/android"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/porn_notification_view"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:background="#ff000000">
+
+    <FrameLayout
+        android:id="@+id/remote_content_parent"
+        android:layout_width="@dimen/notification_panel_width"
+        android:layout_height="@dimen/notification_max_height"
+        android:layout_gravity="center_horizontal">
+
+        <View
+            android:id="@+id/notification_remote_view"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+    </FrameLayout>
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <include layout="@layout/glow_pad_view" />
+
+        <ImageView
+            android:id="@+id/current_notification_icon"
+            android:layout_width="@dimen/handle_icon_size"
+            android:layout_height="@dimen/handle_icon_size"
+            android:layout_centerInParent="true"
+            android:scaleType="fitCenter" />
+
+        <View
+            android:id="@+id/anchor"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_centerInParent="true"/>
+
+        <LinearLayout
+            android:id="@+id/keyguard_other_notifications"
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/anchor"
+            android:layout_centerHorizontal="true"
+            android:layout_marginTop="@dimen/glowpad_overflow_notifications_margin_top" />
+
+        <com.android.systemui.statusbar.policy.activedisplay.ClockView
+            android:id="@+id/clock_view"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_above="@id/anchor"
+            android:layout_centerHorizontal="true"
+            android:layout_marginBottom="@dimen/ad_clock_margin_bottom"
+            android:gravity="center" >
+
+            <TextView
+                android:id="@+id/date"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="-12dp"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_date_font_size"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="@android:color/white"
+                android:textAllCaps="true" />
+            <TextView
+                android:id="@+id/clock_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_clock_font_size"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textColor="@android:color/white"
+                android:layout_below="@id/date" />
+            <TextView
+                android:id="@+id/am_pm"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_ampm_font_size"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="@android:color/white"
+                android:layout_toEndOf="@id/clock_text"
+                android:layout_alignBaseline="@id/clock_text"/>
+        </com.android.systemui.statusbar.policy.activedisplay.ClockView>
+    </RelativeLayout>
+
+</FrameLayout>
+
diff --git a/packages/SystemUI/res/layout/active_display.xml b/packages/SystemUI/res/layout/active_display.xml
new file mode 100644
index 0000000..fd7582a
--- /dev/null
+++ b/packages/SystemUI/res/layout/active_display.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<com.android.systemui.statusbar.policy.activedisplay.ActiveDisplayView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:visibility="gone">
+
+    <!-- All the actual content will end up being inflated and add
+         to the following layout so that we can handle orientation
+         changes and load the appropriate layout based on that. -->
+    <FrameLayout
+        android:id="@+id/active_view_contents"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+</com.android.systemui.statusbar.policy.activedisplay.ActiveDisplayView>
\ No newline at end of file
diff --git a/packages/SystemUI/res/layout/active_display_content.xml b/packages/SystemUI/res/layout/active_display_content.xml
new file mode 100644
index 0000000..190141e
--- /dev/null
+++ b/packages/SystemUI/res/layout/active_display_content.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- This is the selector widget that allows the user to select an action. -->
+<FrameLayout
+    xmlns:prvandroid="http://schemas.android.com/apk/prv/res/android"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/porn_notification_view"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:clipChildren="false"
+    android:clipToPadding="false"
+    android:background="#ff000000">
+
+    <FrameLayout
+        android:id="@+id/remote_content_parent"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/notification_max_height"
+        android:layout_gravity="center_horizontal">
+
+        <View
+            android:id="@+id/notification_remote_view"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+
+    </FrameLayout>
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <include layout="@layout/glow_pad_view" />
+
+        <ImageView
+            android:id="@+id/current_notification_icon"
+            android:layout_width="@dimen/handle_icon_size"
+            android:layout_height="@dimen/handle_icon_size"
+            android:layout_centerInParent="true"
+            android:scaleType="fitCenter" />
+
+        <View
+            android:id="@+id/anchor"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_centerInParent="true"/>
+
+        <LinearLayout
+            android:id="@+id/keyguard_other_notifications"
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/anchor"
+            android:layout_centerHorizontal="true"
+            android:layout_marginTop="@dimen/glowpad_overflow_notifications_margin_top" />
+
+        <com.android.systemui.statusbar.policy.activedisplay.ClockView
+            android:id="@+id/clock_view"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_above="@id/anchor"
+            android:layout_centerHorizontal="true"
+            android:layout_marginBottom="@dimen/ad_clock_margin_bottom"
+            android:gravity="center" >
+
+            <TextView
+                android:id="@+id/date"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginBottom="-12dp"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_date_font_size"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="@android:color/white"
+                android:textAllCaps="true" />
+            <TextView
+                android:id="@+id/clock_text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_clock_font_size"
+                android:textAppearance="?android:attr/textAppearanceMedium"
+                android:textColor="@android:color/white"
+                android:layout_below="@id/date" />
+            <TextView
+                android:id="@+id/am_pm"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:singleLine="true"
+                android:ellipsize="none"
+                android:textSize="@dimen/ad_ampm_font_size"
+                android:textAppearance="?android:attr/textAppearanceSmall"
+                android:textColor="@android:color/white"
+                android:layout_toEndOf="@id/clock_text"
+                android:layout_alignBaseline="@id/clock_text"/>
+        </com.android.systemui.statusbar.policy.activedisplay.ClockView>
+    </RelativeLayout>
+
+</FrameLayout>
+
diff --git a/packages/SystemUI/res/layout/glow_pad_container.xml b/packages/SystemUI/res/layout/glow_pad_container.xml
new file mode 100644
index 0000000..0faf312
--- /dev/null
+++ b/packages/SystemUI/res/layout/glow_pad_container.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <include layout="@layout/glow_pad_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"/>
+</merge>
diff --git a/packages/SystemUI/res/layout/glow_pad_view.xml b/packages/SystemUI/res/layout/glow_pad_view.xml
new file mode 100644
index 0000000..c121879
--- /dev/null
+++ b/packages/SystemUI/res/layout/glow_pad_view.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+**
+** Copyright 2012, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License")
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+-->
+
+<!-- This is the selector widget that allows the user to select an action. -->
+<com.android.internal.widget.multiwaveview.GlowPadView
+    xmlns:prvandroid="http://schemas.android.com/apk/prv/res/android"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/glow_pad_view"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_centerInParent="true"
+    android:orientation="horizontal"
+
+    prvandroid:targetDrawables="@*android:array/lockscreen_targets_unlock_only"
+    prvandroid:targetDescriptions="@*android:array/lockscreen_target_descriptions_unlock_only"
+    prvandroid:directionDescriptions="@*android:array/lockscreen_direction_descriptions"
+    prvandroid:handleDrawable="@*android:drawable/ic_lockscreen_handle"
+    prvandroid:outerRingDrawable="@*android:drawable/ic_lockscreen_outerring"
+    prvandroid:outerRadius="@*android:dimen/glowpadview_target_placement_radius"
+    prvandroid:innerRadius="@*android:dimen/glowpadview_inner_radius"
+    prvandroid:snapMargin="@*android:dimen/glowpadview_snap_margin"
+    prvandroid:firstItemOffset="@*android:integer/kg_glowpad_rotation_offset"
+    prvandroid:magneticTargets="false"
+    prvandroid:feedbackCount="1"
+    prvandroid:vibrationDuration="20"
+    prvandroid:glowRadius="@*android:dimen/glowpadview_glow_radius"
+    prvandroid:pointDrawable="@*android:drawable/ic_lockscreen_glowdot"
+    prvandroid:allowScaling="true" />
diff --git a/packages/SystemUI/res/values/dimens.xml b/packages/SystemUI/res/values/dimens.xml
index 77d0452..4340a75 100644
--- a/packages/SystemUI/res/values/dimens.xml
+++ b/packages/SystemUI/res/values/dimens.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
+<?xml version="1.0" encoding="utf-8"?><!--
  * Copyright (c) 2006, The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -244,4 +243,33 @@
 
     <dimen name="pie_sysinfo_radius">165dp</dimen>
     <dimen name="pie_sysinfo_height">85sp</dimen>
+
+    <!-- Active Display -->
+    <!-- Top margin for overflow notifications container shown in the P.O.R.N. view -->
+    <dimen name="glowpad_overflow_notifications_margin_top">64dp</dimen>
+
+    <!-- Top margin for overflow notifications container shown in the active display view -->
+    <dimen name="ad_clock_margin_bottom">60dp</dimen>
+
+    <!-- left/right margin for extra notifications in ActiveDisplayView -->
+    <dimen name="ad_notification_margin">4dp</dimen>
+
+    <!-- Active display overflow notification icon size -->
+    <dimen name="overflow_icon_size">28dp</dimen>
+
+    <!-- Active display Handle notification icon size -->
+    <dimen name="handle_icon_size">32dp</dimen>
+
+    <!-- Active display overflow notification padding -->
+    <dimen name="overflow_icon_padding">2dp</dimen>
+
+    <!-- Active display clock font size -->
+    <dimen name="ad_clock_font_size">75dp</dimen>
+
+    <!-- Active display date font size -->
+    <dimen name="ad_date_font_size">18dp</dimen>
+
+    <!-- AM/PM size in active display -->
+    <dimen name="ad_ampm_font_size">32dp</dimen>
+
 </resources>
diff --git a/packages/SystemUI/res/values/donottranslate.xml b/packages/SystemUI/res/values/donottranslate.xml
index 4eb49e3..5272bb6 100644
--- a/packages/SystemUI/res/values/donottranslate.xml
+++ b/packages/SystemUI/res/values/donottranslate.xml
@@ -21,4 +21,5 @@
     <string name="system_ui_date_pattern" translatable="false">MMMMd</string>
     <!-- DO NOT TRANSLATE. ICU weekday format for display -->
     <string name="system_ui_weekday_pattern" translatable="false">eeee</string>
+    <string name="ad_date_pattern">eeeMMMd</string>
 </resources>
diff --git a/packages/SystemUI/res/values/styles.xml b/packages/SystemUI/res/values/styles.xml
index 988b14c..887e07a 100644
--- a/packages/SystemUI/res/values/styles.xml
+++ b/packages/SystemUI/res/values/styles.xml
@@ -207,4 +207,10 @@
         <item name="android:lineSpacingMultiplier">1.1</item>
     </style>
 
+    <style name="Theme.DummyActivity" parent="android:style/Theme.Translucent" >
+        <item name="android:windowNoTitle">true</item>
+        <item name="android:windowContentOverlay">@null</item>
+        <item name="android:background">@android:color/transparent</item>
+    </style>
+
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 72ba5cb..8f8519a 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -17,22 +17,6 @@
 
 package com.android.systemui.statusbar;
 
-import android.service.notification.StatusBarNotification;
-import android.content.res.Configuration;
-import com.android.internal.statusbar.IStatusBarService;
-import com.android.internal.statusbar.StatusBarIcon;
-import com.android.internal.statusbar.StatusBarIconList;
-import com.android.internal.widget.SizeAdaptiveLayout;
-import com.android.systemui.R;
-import com.android.systemui.SearchPanelView;
-import com.android.systemui.SystemUI;
-import com.android.systemui.recent.RecentTasksLoader;
-import com.android.systemui.recent.RecentsActivity;
-import com.android.systemui.recent.TaskDescription;
-import com.android.systemui.statusbar.policy.NotificationRowLayout;
-import com.android.systemui.statusbar.policy.PieController;
-import com.android.systemui.statusbar.tablet.StatusBarPanel;
-
 import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.ActivityOptions;
@@ -47,10 +31,12 @@
 import android.content.IntentFilter;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.database.ContentObserver;
 import android.graphics.Bitmap;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.net.Uri;
 import android.os.Build;
@@ -61,12 +47,14 @@
 import android.os.ServiceManager;
 import android.os.UserHandle;
 import android.provider.Settings;
+import android.service.notification.StatusBarNotification;
 import android.service.pie.PieManager;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import android.util.Slog;
 import android.view.Display;
+import android.view.Gravity;
 import android.view.IWindowManager;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
@@ -83,9 +71,25 @@
 import android.widget.RemoteViews;
 import android.widget.TextView;
 
+import com.android.internal.statusbar.IStatusBarService;
+import com.android.internal.statusbar.StatusBarIcon;
+import com.android.internal.statusbar.StatusBarIconList;
+import com.android.internal.widget.SizeAdaptiveLayout;
+import com.android.systemui.R;
+import com.android.systemui.SearchPanelView;
+import com.android.systemui.SystemUI;
+import com.android.systemui.recent.RecentTasksLoader;
+import com.android.systemui.recent.RecentsActivity;
+import com.android.systemui.recent.TaskDescription;
+import com.android.systemui.statusbar.policy.NotificationRowLayout;
+import com.android.systemui.statusbar.policy.PieController;
+import com.android.systemui.statusbar.tablet.StatusBarPanel;
+
 import java.util.ArrayList;
 import java.util.Locale;
 
+import com.android.systemui.statusbar.policy.activedisplay.ActiveDisplayView;
+
 public abstract class BaseStatusBar extends SystemUI implements
         CommandQueue.Callbacks {
     public static final String TAG = "StatusBar";
@@ -135,6 +139,8 @@
 
     protected FrameLayout mStatusBarContainer;
 
+    protected ActiveDisplayView mActiveDisplayView;
+
     private Runnable mPanelCollapseRunnable = new Runnable() {
         @Override
         public void run() {
@@ -1328,4 +1334,34 @@ public void updatePieTriggerMask(int newMask) {
             mPieController.updatePieTriggerMask(newMask);
         }
     }
+
+    protected void addActiveDisplayView() {
+        mActiveDisplayView = (ActiveDisplayView)View.inflate(mContext, R.layout.active_display, null);
+        mWindowManager.addView(mActiveDisplayView, getActiveDisplayViewLayoutParams());
+        mActiveDisplayView.setStatusBar(this);
+    }
+
+    protected void removeActiveDisplayView() {
+        if (mActiveDisplayView != null)
+            mWindowManager.removeView(mActiveDisplayView);
+    }
+
+    protected WindowManager.LayoutParams getActiveDisplayViewLayoutParams() {
+        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
+                LayoutParams.MATCH_PARENT,
+                LayoutParams.MATCH_PARENT,
+                WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL,
+                0
+                        | WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING
+                        | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+                        | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
+                        | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
+                        | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH,
+                PixelFormat.TRANSLUCENT);
+        lp.gravity = Gravity.TOP | Gravity.FILL_VERTICAL | Gravity.FILL_HORIZONTAL;
+        lp.setTitle("ActiveDisplayView");
+
+        return lp;
+    }
+
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 479bd7a..dd34099 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -540,6 +540,8 @@ public boolean onTouch(View v, MotionEvent event) {
             // no window manager? good luck with that
         }
 
+        addActiveDisplayView();
+
         // figure out which pixel-format to use for the status bar.
         mPixelFormat = PixelFormat.OPAQUE;
 
@@ -2321,7 +2323,7 @@ private void setStatusBarLowProfile(boolean lightsOut) {
         setAreThereNotifications();
     }
 
-    private boolean areLightsOn() {
+    public boolean areLightsOn() {
         return 0 == (mSystemUiVisibility & View.SYSTEM_UI_FLAG_LOW_PROFILE);
     }
 
@@ -2341,6 +2343,10 @@ private void notifyUiVisibilityChanged() {
         }
     }
 
+    public void setNavigationBarLightsOn(boolean on, boolean force) {
+        mNavigationBarView.setLowProfile(!on, true, force);
+    }
+
     @Override
     public void topAppWindowChanged(boolean showMenu) {
         if (DEBUG) {
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ActiveDisplayView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ActiveDisplayView.java
new file mode 100644
index 0000000..091908c
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ActiveDisplayView.java
@@ -0,0 +1,1047 @@
+/*
+ * Copyright (C) 2013 The ChameleonOS Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.systemui.statusbar.policy.activedisplay;
+
+import android.animation.ObjectAnimator;
+import android.app.ActivityManagerNative;
+import android.app.AlarmManager;
+import android.app.INotificationManager;
+import android.app.KeyguardManager;
+import android.app.KeyguardManager.KeyguardLock;
+import android.app.Notification;
+import android.app.PendingIntent;
+import android.app.PendingIntent.CanceledException;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.database.ContentObserver;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.InsetDrawable;
+import android.graphics.drawable.LayerDrawable;
+import android.graphics.drawable.StateListDrawable;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.os.IPowerManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.SystemClock;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.service.notification.INotificationListener;
+import android.service.notification.StatusBarNotification;
+import android.telephony.TelephonyManager;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RemoteViews;
+
+import com.android.internal.widget.multiwaveview.GlowPadView;
+import com.android.internal.widget.multiwaveview.GlowPadView.OnTriggerListener;
+import com.android.internal.widget.multiwaveview.TargetDrawable;
+
+import com.android.systemui.R;
+import com.android.systemui.statusbar.BaseStatusBar;
+import com.android.systemui.statusbar.tablet.TabletStatusBar;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+
+public class ActiveDisplayView extends FrameLayout {
+    private static final boolean DEBUG = false;
+    private static final String TAG = "ActiveDisplayView";
+
+    // the following is used for testing purposes
+    private static final String ACTION_FORCE_DISPLAY
+            = "com.android.systemui.action.FORCE_DISPLAY";
+
+    private static final String ACTION_REDISPLAY_NOTIFICATION
+            = "com.android.systemui.action.REDISPLAY_NOTIFICATION";
+
+    private static final String ACTION_DISPLAY_TIMEOUT
+            = "com.android.systemui.action.DISPLAY_TIMEOUT";
+
+    private static final int MAX_OVERFLOW_ICONS = 8;
+
+    private static final long DISPLAY_TIMEOUT = 8000L;
+
+    // Targets
+    private static final int UNLOCK_TARGET = 0;
+    private static final int OPEN_APP_TARGET = 4;
+    private static final int DISMISS_TARGET = 6;
+
+    // messages sent to the handler for processing
+    private static final int MSG_SHOW_NOTIFICATION_VIEW = 1000;
+    private static final int MSG_HIDE_NOTIFICATION_VIEW = 1001;
+    private static final int MSG_SHOW_NOTIFICATION      = 1002;
+    private static final int MSG_DISMISS_NOTIFICATION   = 1003;
+
+    private BaseStatusBar mBar;
+    private GlowPadView mGlowPadView;
+    private View mRemoteView;
+    private View mClock;
+    private ImageView mCurrentNotificationIcon;
+    private FrameLayout mRemoteViewLayout;
+    private FrameLayout mContents;
+    private ObjectAnimator mAnim;
+    private Drawable mNotificationDrawable;
+    private int mCreationOrientation;
+    private SettingsObserver mSettingsObserver;
+    private IPowerManager mPM;
+    private INotificationManager mNM;
+    private INotificationListenerWrapper mNotificationListener;
+    private StatusBarNotification mNotification;
+    private SensorManager mSensorManager;
+    private Sensor mLightSensor;
+    private Sensor mProximitySensor;
+    private boolean mProximityIsFar = true;
+    private LinearLayout mOverflowNotifications;
+    private LayoutParams mRemoteViewLayoutParams;
+    private int mIconSize;
+    private int mIconMargin;
+    private int mIconPadding;
+    private LinearLayout.LayoutParams mOverflowLayoutParams;
+    private KeyguardManager mKeyguardManager;
+    private KeyguardLock mKeyguardLock;
+
+    // user customizable settings
+    private boolean mDisplayNotifications = false;
+    private boolean mDisplayNotificationText = false;
+    private boolean mShowAllNotifications = false;
+    private boolean mPocketModeEnabled = false;
+    private long mRedisplayTimeout = 0;
+    private float mInitialBrightness = 1f;
+    private int mBrightnessMode = -1;
+    private int mUserBrightnessLevel = -1;
+
+    /**
+     * Simple class that listens to changes in notifications
+     */
+    private class INotificationListenerWrapper extends INotificationListener.Stub {
+        @Override
+        public void onNotificationPosted(final StatusBarNotification sbn) {
+            if (shouldShowNotification() && isValidNotification(sbn)) {
+                // need to make sure either the screen is off or the user is currently
+                // viewing the notifications
+                if (ActiveDisplayView.this.getVisibility() == View.VISIBLE
+                        || !isScreenOn())
+                    showNotification(sbn, true);
+            }
+        }
+        @Override
+        public void onNotificationRemoved(final StatusBarNotification sbn) {
+            if (mNotification != null && sbn.getPackageName().equals(mNotification.getPackageName())) {
+                if (getVisibility() == View.VISIBLE) {
+                    mNotification = getNextAvailableNotification();
+                    if (mNotification != null) {
+                        setActiveNotification(mNotification, true);
+                        userActivity();
+                        return;
+                    }
+                } else {
+                    mNotification = null;
+                }
+            }
+        }
+    }
+
+    private OnTriggerListener mOnTriggerListener = new OnTriggerListener() {
+
+        public void onTrigger(final View v, final int target) {
+            if (target == UNLOCK_TARGET) {
+                mNotification = null;
+                hideNotificationView();
+                if (!mKeyguardManager.isKeyguardSecure()) {
+                    // This is a BUTT ugly hack to allow dismissing the slide lock
+                    Intent intent = new Intent(mContext, DummyActivity.class);
+                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
+                    try {
+                        // Dismiss the lock screen when Settings starts.
+                        ActivityManagerNative.getDefault().dismissKeyguardOnNextActivity();
+                        mContext.startActivityAsUser(intent, new UserHandle(UserHandle.USER_CURRENT));
+                    } catch (RemoteException e) {
+                    }
+                }
+            } else if (target == OPEN_APP_TARGET) {
+                hideNotificationView();
+                if (!mKeyguardManager.isKeyguardSecure()) {
+                    try {
+                        // Dismiss the lock screen when Settings starts.
+                        ActivityManagerNative.getDefault().dismissKeyguardOnNextActivity();
+                    } catch (RemoteException e) {
+                    }
+                }
+                launchNotificationPendingIntent();
+            } else if (target == DISMISS_TARGET) {
+                dismissNotification();
+            }
+        }
+
+        public void onReleased(final View v, final int handle) {
+            ObjectAnimator.ofFloat(mCurrentNotificationIcon, "alpha", 1f).start();
+            doTransition(mOverflowNotifications, 1.0f, 0);
+            if (mRemoteView != null) {
+                ObjectAnimator.ofFloat(mRemoteView, "alpha", 0f).start();
+                ObjectAnimator.ofFloat(mClock, "alpha", 1f).start();
+            }
+            // user stopped interacting so kick off the timeout timer
+            updateTimeoutTimer();
+        }
+
+        public void onGrabbed(final View v, final int handle) {
+            // prevent the ActiveDisplayView from turning off while user is interacting with it
+            cancelTimeoutTimer();
+            restoreBrightness();
+            ObjectAnimator.ofFloat(mCurrentNotificationIcon, "alpha", 0f).start();
+            doTransition(mOverflowNotifications, 0.0f, 0);
+            if (mRemoteView != null) {
+                ObjectAnimator.ofFloat(mRemoteView, "alpha", 1f).start();
+                ObjectAnimator.ofFloat(mClock, "alpha", 0f).start();
+            }
+        }
+
+        public void onGrabbedStateChange(final View v, final int handle) {
+
+        }
+
+        public void onFinishFinalAnimation() {
+
+        }
+
+    };
+
+    /**
+     * Class used to listen for changes to active display related settings
+     */
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver =
+                    ActiveDisplayView.this.mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ENABLE_ACTIVE_DISPLAY), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_TEXT), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_ALL_NOTIFICATIONS), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_POCKET_MODE), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_REDISPLAY), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_BRIGHTNESS), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.SCREEN_BRIGHTNESS_MODE), false, this);
+            update();
+        }
+
+        void unobserve() {
+            ActiveDisplayView.this.mContext.getContentResolver()
+                    .unregisterContentObserver(this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            update();
+        }
+
+        public void update() {
+            ContentResolver resolver =
+                    ActiveDisplayView.this.mContext.getContentResolver();
+
+            mDisplayNotifications = Settings.System.getInt(
+                    resolver, Settings.System.ENABLE_ACTIVE_DISPLAY, 0) == 1;
+            mDisplayNotificationText = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_TEXT, 0) == 1;
+            mShowAllNotifications = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_ALL_NOTIFICATIONS, 0) == 1;
+            mPocketModeEnabled = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_POCKET_MODE, 0) == 1;
+            mRedisplayTimeout = Settings.System.getLong(
+                    resolver, Settings.System.ACTIVE_DISPLAY_REDISPLAY, 0L);
+            mInitialBrightness = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_BRIGHTNESS, 100) / 100f;
+
+            int brightnessMode = Settings.System.getInt(
+                    resolver, Settings.System.SCREEN_BRIGHTNESS_MODE, -1);
+            if (mBrightnessMode != brightnessMode) {
+                mBrightnessMode = brightnessMode;
+                mUserBrightnessLevel = -1;
+            }
+
+            if (!mDisplayNotifications || mRedisplayTimeout <= 0) {
+                cancelRedisplayTimer();
+            }
+        }
+    }
+
+    private Handler mHandler = new Handler(Looper.getMainLooper()) {
+        @Override
+        public void handleMessage(final Message msg) {
+            switch (msg.what) {
+                case MSG_SHOW_NOTIFICATION_VIEW:
+                    handleShowNotificationView();
+                    break;
+                case MSG_HIDE_NOTIFICATION_VIEW:
+                    handleHideNotificationView();
+                    break;
+                case MSG_SHOW_NOTIFICATION:
+                    boolean ping = msg.arg1 == 1;
+                    handleShowNotification(ping);
+                    break;
+                case MSG_DISMISS_NOTIFICATION:
+                    handleDismissNotification();
+                    break;
+                default:
+                    break;
+            }
+        }
+    };
+
+    public ActiveDisplayView(Context context) {
+        this(context, null);
+    }
+
+    public ActiveDisplayView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);
+        mProximitySensor = mSensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
+        // uncomment once we figure out if and when we are going to use the light sensor
+        //mLightSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);
+
+        mPM = IPowerManager.Stub.asInterface(ServiceManager.getService(Context.POWER_SERVICE));
+        mNM = INotificationManager.Stub.asInterface(
+                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
+        mNotificationListener = new INotificationListenerWrapper();
+
+        mIconSize = getResources().getDimensionPixelSize(R.dimen.overflow_icon_size);
+        mIconMargin = getResources().getDimensionPixelSize(R.dimen.ad_notification_margin);
+        mIconPadding = getResources().getDimensionPixelSize(R.dimen.overflow_icon_padding);
+
+        mKeyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);
+
+        mSettingsObserver = new SettingsObserver(new Handler());
+        mCreationOrientation = Resources.getSystem().getConfiguration().orientation;
+    }
+
+    public void setStatusBar(BaseStatusBar bar) {
+        mBar = bar;
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        mContents = (FrameLayout) findViewById(R.id.active_view_contents);
+        makeActiveDisplayView(mCreationOrientation, false);
+    }
+
+    @Override protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        registerNotificationListener();
+        registerSensorListener();
+        registerBroadcastReceiver();
+        mSettingsObserver.observe();
+        if (mRedisplayTimeout > 0 && !isScreenOn()) updateRedisplayTimer();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        unregisterSensorListener();
+        unregisterNotificationListener();
+        unregisterBroadcastReceiver();
+        mSettingsObserver.unobserve();
+    }
+
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        makeActiveDisplayView(newConfig.orientation, true);
+    }
+
+    private void makeActiveDisplayView(int orientation, boolean recreate) {
+        mContents.removeAllViews();
+        View contents = View.inflate(mContext, R.layout.active_display_content, mContents);
+        mGlowPadView = (GlowPadView) contents.findViewById(R.id.glow_pad_view);
+        mGlowPadView.setOnTriggerListener(mOnTriggerListener);
+        mGlowPadView.setDrawOuterRing(false);
+        TargetDrawable nDrawable = new TargetDrawable(getResources(),
+                createLockHandle( getResources().getDrawable(R.drawable.ic_handle_notification_normal)));
+        mGlowPadView.setHandleDrawable(nDrawable);
+
+        mRemoteViewLayout = (FrameLayout) contents.findViewById(R.id.remote_content_parent);
+        mClock = contents.findViewById(R.id.clock_view);
+        mCurrentNotificationIcon = (ImageView) contents.findViewById(R.id.current_notification_icon);
+
+        mOverflowNotifications = (LinearLayout) contents.findViewById(R.id.keyguard_other_notifications);
+        mOverflowNotifications.setOnTouchListener(mOverflowTouchListener);
+
+        mRemoteViewLayoutParams = getRemoteViewLayoutParams(orientation);
+        mOverflowLayoutParams = getOverflowLayoutParams();
+        updateTargets();
+        if (recreate) {
+            updateTimeoutTimer();
+            if (mNotification == null) {
+                mNotification = getNextAvailableNotification();
+            }
+            showNotification(mNotification, true);
+            if (mBar instanceof TabletStatusBar) mBar.disable(0xffffffff);
+        }
+    }
+
+    private FrameLayout.LayoutParams getRemoteViewLayoutParams(int orientation) {
+        FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(
+                ViewGroup.LayoutParams.MATCH_PARENT,
+                getResources().getDimensionPixelSize(R.dimen.notification_min_height),
+                orientation == Configuration.ORIENTATION_LANDSCAPE ? Gravity.CENTER : Gravity.TOP);
+        return lp;
+    }
+
+    private LinearLayout.LayoutParams getOverflowLayoutParams() {
+        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
+                mIconSize,
+                mIconSize);
+        lp.setMargins(mIconMargin, 0, mIconMargin, 0);
+        return lp;
+    }
+
+    private StateListDrawable getLayeredDrawable(Drawable back, Drawable front, int inset, boolean frontBlank) {
+        Resources res = getResources();
+        InsetDrawable[] inactivelayer = new InsetDrawable[2];
+        InsetDrawable[] activelayer = new InsetDrawable[2];
+        inactivelayer[0] = new InsetDrawable(
+                res.getDrawable(com.android.internal.R.drawable.ic_lockscreen_lock_pressed), 0, 0, 0, 0);
+        inactivelayer[1] = new InsetDrawable(front, inset, inset, inset, inset);
+        activelayer[0] = new InsetDrawable(back, 0, 0, 0, 0);
+        activelayer[1] = new InsetDrawable(
+                frontBlank ? res.getDrawable(android.R.color.transparent) : front, inset, inset, inset, inset);
+        StateListDrawable states = new StateListDrawable();
+        LayerDrawable inactiveLayerDrawable = new LayerDrawable(inactivelayer);
+        inactiveLayerDrawable.setId(0, 0);
+        inactiveLayerDrawable.setId(1, 1);
+        LayerDrawable activeLayerDrawable = new LayerDrawable(activelayer);
+        activeLayerDrawable.setId(0, 0);
+        activeLayerDrawable.setId(1, 1);
+        states.addState(TargetDrawable.STATE_INACTIVE, inactiveLayerDrawable);
+        states.addState(TargetDrawable.STATE_ACTIVE, activeLayerDrawable);
+        states.addState(TargetDrawable.STATE_FOCUSED, activeLayerDrawable);
+        return states;
+    }
+
+    private void updateTargets() {
+        updateResources();
+    }
+
+    public void updateResources() {
+        ArrayList<TargetDrawable> storedDraw = new ArrayList<TargetDrawable>();
+        final Resources res = getResources();
+        final int targetInset = res.getDimensionPixelSize(com.android.internal.R.dimen.lockscreen_target_inset);
+        final Drawable blankActiveDrawable =
+                res.getDrawable(com.android.internal.R.drawable.ic_lockscreen_target_activated);
+        final InsetDrawable activeBack = new InsetDrawable(blankActiveDrawable, 0, 0, 0, 0);
+
+        // Add unlock target
+        storedDraw.add(new TargetDrawable(res, res.getDrawable(com.android.internal.R.drawable.ic_lockscreen_unlock)));
+        if (mNotificationDrawable != null) {
+            storedDraw.add(new TargetDrawable(res, null));
+            storedDraw.add(new TargetDrawable(res, null));
+            storedDraw.add(new TargetDrawable(res, null));
+            storedDraw.add(new TargetDrawable(res, getLayeredDrawable(activeBack,
+                    mNotificationDrawable, targetInset, false)));
+            storedDraw.add(new TargetDrawable(res, null));
+            if (mNotification.isClearable()) {
+                storedDraw.add(new TargetDrawable(res, res.getDrawable(R.drawable.ic_ad_dismiss_notification)));
+            } else {
+                storedDraw.add(new TargetDrawable(res, null));
+            }
+        }
+        storedDraw.add(new TargetDrawable(res, null));
+        mGlowPadView.setTargetResources(storedDraw);
+    }
+
+    private void doTransition(View view, float to, long duration) {
+        if (mAnim != null) {
+            mAnim.cancel();
+        }
+        mAnim = ObjectAnimator.ofFloat(view, "alpha", to);
+        if (duration > 0) mAnim.setDuration(duration);
+        mAnim.start();
+    }
+
+    /**
+     * Launches the pending intent for the currently selected notification
+     */
+    private void launchNotificationPendingIntent() {
+        if (mNotification != null) {
+            PendingIntent contentIntent = mNotification.getNotification().contentIntent;
+            if (contentIntent != null) {
+                try {
+                    contentIntent.send();
+                    mNM.cancelNotificationFromListener(mNotificationListener,
+                            mNotification.getPackageName(), mNotification.getTag(),
+                            mNotification.getId());
+                } catch (RemoteException re) {
+                } catch (CanceledException ce) {
+                }
+            }
+            mNotification = null;
+        }
+    }
+
+    private void showNotificationView() {
+        mHandler.removeMessages(MSG_SHOW_NOTIFICATION_VIEW);
+        mHandler.sendEmptyMessage(MSG_SHOW_NOTIFICATION_VIEW);
+    }
+
+    private void hideNotificationView() {
+        mHandler.removeMessages(MSG_HIDE_NOTIFICATION_VIEW);
+        mHandler.sendEmptyMessage(MSG_HIDE_NOTIFICATION_VIEW);
+    }
+
+    private void showNotification(StatusBarNotification sbn, boolean ping) {
+        mNotification = sbn;
+        Message msg = new Message();
+        msg.what = MSG_SHOW_NOTIFICATION;
+        msg.arg1 = ping ? 1 : 0;
+        mHandler.removeMessages(MSG_SHOW_NOTIFICATION);
+        mHandler.sendMessage(msg);
+    }
+
+    private void dismissNotification() {
+        mHandler.removeMessages(MSG_DISMISS_NOTIFICATION);
+        mHandler.sendEmptyMessage(MSG_DISMISS_NOTIFICATION);
+    }
+
+    private void handleShowNotificationView() {
+        if (mKeyguardLock == null) {
+            mKeyguardLock = mKeyguardManager.newKeyguardLock("active_display");
+            mKeyguardLock.disableKeyguard();
+        }
+        setVisibility(View.VISIBLE);
+        mBar.disable(0xffffffff);
+    }
+
+    private void handleHideNotificationView() {
+        if (mKeyguardLock != null) {
+            mKeyguardLock.reenableKeyguard();
+            mKeyguardLock = null;
+        }
+        setVisibility(View.GONE);
+        restoreBrightness();
+        mBar.disable(0);
+        cancelTimeoutTimer();
+    }
+
+    private void handleShowNotification(boolean ping) {
+        if (!mDisplayNotifications) return;
+        showNotificationView();
+        setActiveNotification(mNotification, true);
+        inflateRemoteView(mNotification);
+        if (!isScreenOn()) {
+            // to avoid flicker and showing any other screen than the ActiveDisplayView
+            // we use a runnable posted with a 250ms delay to turn wake the device
+            mHandler.postDelayed(new Runnable() {
+                @Override
+                public void run() {
+                    setBrightness(mInitialBrightness);
+                    wakeDevice();
+                    doTransition(ActiveDisplayView.this, 1f, 1000);
+                }
+            }, 250);
+        }
+        if (ping) mGlowPadView.ping();
+    }
+
+    private void handleDismissNotification() {
+        try {
+            mNM.cancelNotificationFromListener(mNotificationListener,
+                    mNotification.getPackageName(), mNotification.getTag(),
+                    mNotification.getId());
+        } catch (RemoteException e) {
+        }
+        mNotification = getNextAvailableNotification();
+        if (mNotification != null) {
+            setActiveNotification(mNotification, true);
+            userActivity();
+            return;
+        }
+
+        // no other notifications to display so turn screen off
+        turnScreenOff();
+    }
+
+    private void onScreenTurnedOn() {
+        cancelRedisplayTimer();
+    }
+
+    private void onScreenTurnedOff() {
+        hideNotificationView();
+        cancelTimeoutTimer();
+        if (mRedisplayTimeout > 0) updateRedisplayTimer();
+    }
+
+    private void turnScreenOff() {
+        try {
+            mPM.goToSleep(SystemClock.uptimeMillis(), 0);
+        } catch (RemoteException e) {
+        }
+    }
+
+    private boolean isScreenOn() {
+        try {
+            return mPM.isScreenOn();
+        } catch (RemoteException e) {
+        }
+
+        return false;
+    }
+
+    private void setBrightness(float brightness) {
+        final ContentResolver resolver = mContext.getContentResolver();
+        mBrightnessMode = Settings.System.getInt(resolver, Settings.System.SCREEN_BRIGHTNESS_MODE,
+                Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
+        if (mBrightnessMode != Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {
+            mUserBrightnessLevel = Settings.System.getInt(resolver, Settings.System.SCREEN_BRIGHTNESS,
+                    android.os.PowerManager.BRIGHTNESS_ON);
+            final int dim = getResources().getInteger(
+                    com.android.internal.R.integer.config_screenBrightnessDim);
+            int level = (int)((android.os.PowerManager.BRIGHTNESS_ON - dim) * brightness) + dim;
+            Settings.System.putInt(resolver,
+                    Settings.System.SCREEN_BRIGHTNESS_MODE,
+                    Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
+            try {
+                mPM.setTemporaryScreenBrightnessSettingOverride(level);
+            } catch (RemoteException e) {
+            }
+        }
+    }
+
+    private void restoreBrightness() {
+        if (mUserBrightnessLevel < 0 || mBrightnessMode < 0
+                || mBrightnessMode == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {
+            return;
+        }
+        final ContentResolver resolver = mContext.getContentResolver();
+        try {
+            mPM.setTemporaryScreenBrightnessSettingOverride(mUserBrightnessLevel);
+        } catch (RemoteException e) {
+        }
+        Settings.System.putInt(resolver,
+                Settings.System.SCREEN_BRIGHTNESS_MODE,
+                mBrightnessMode);
+    }
+
+    private void userActivity() {
+        restoreBrightness();
+        updateTimeoutTimer();
+    }
+
+    private void registerBroadcastReceiver() {
+        IntentFilter filter = new IntentFilter(ACTION_REDISPLAY_NOTIFICATION);
+        filter.addAction(ACTION_DISPLAY_TIMEOUT);
+        filter.addAction(Intent.ACTION_SCREEN_OFF);
+        filter.addAction(Intent.ACTION_SCREEN_ON);
+        /* uncomment the line below for testing */
+        filter.addAction(ACTION_FORCE_DISPLAY);
+        mContext.registerReceiver(mBroadcastReceiver, filter);
+    }
+
+    private void unregisterBroadcastReceiver() {
+        mContext.unregisterReceiver(mBroadcastReceiver);
+    }
+
+    private void registerNotificationListener() {
+        ComponentName cn = new ComponentName("android", "");
+        try {
+            mNM.registerListener(mNotificationListener, cn, UserHandle.USER_ALL);
+        } catch (RemoteException e) {
+            Log.e(TAG, "registerNotificationListener()", e);
+        }
+    }
+
+    private void unregisterNotificationListener() {
+        if (mNotificationListener !=  null) {
+            try {
+                mNM.unregisterListener(mNotificationListener, UserHandle.USER_ALL);
+            } catch (RemoteException e) {
+                Log.e(TAG, "registerNotificationListener()", e);
+            }
+        }
+    }
+
+    private void registerSensorListener() {
+        if (mProximitySensor != null)
+            mSensorManager.registerListener(mSensorListener, mProximitySensor, SensorManager.SENSOR_DELAY_UI);
+        if (mLightSensor != null)
+            mSensorManager.registerListener(mSensorListener, mLightSensor, SensorManager.SENSOR_DELAY_UI);
+    }
+
+    private void unregisterSensorListener() {
+        if (mProximitySensor != null)
+            mSensorManager.unregisterListener(mSensorListener, mProximitySensor);
+        if (mLightSensor != null)
+            mSensorManager.unregisterListener(mSensorListener, mLightSensor);
+    }
+
+    private StatusBarNotification getNextAvailableNotification() {
+        try {
+            // check if other notifications exist and if so display the next one
+            StatusBarNotification[] sbns = mNM
+                    .getActiveNotificationsFromListener(mNotificationListener);
+            if (sbns == null) return null;
+            for (int i = sbns.length - 1; i >= 0; i--) {
+                if (sbns[i] == null)
+                    continue;
+                if (shouldShowNotification() && isValidNotification(sbns[i])) {
+                    return sbns[i];
+                }
+            }
+        } catch (RemoteException e) {
+        }
+
+        return null;
+    }
+
+    private void updateOtherNotifications() {
+        mOverflowNotifications.post(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    // check if other clearable notifications exist and if so display the next one
+                    StatusBarNotification[] sbns = mNM
+                            .getActiveNotificationsFromListener(mNotificationListener);
+                    mOverflowNotifications.removeAllViews();
+                    for (int i = sbns.length - 1; i >= 0; i--) {
+                        if (isValidNotification(sbns[i])
+                                && mOverflowNotifications.getChildCount() < MAX_OVERFLOW_ICONS) {
+                            ImageView iv = new ImageView(mContext);
+                            if (mOverflowNotifications.getChildCount() < (MAX_OVERFLOW_ICONS - 1)) {
+                                Context pkgContext = mContext.createPackageContext(
+                                        sbns[i].getPackageName(), Context.CONTEXT_RESTRICTED);
+                                iv.setImageDrawable(pkgContext.getResources()
+                                        .getDrawable(sbns[i].getNotification().icon));
+                                iv.setTag(sbns[i]);
+                                if (sbns[i].getPackageName().equals(mNotification.getPackageName())
+                                        && sbns[i].getId() == mNotification.getId()) {
+                                    iv.setBackgroundResource(R.drawable.ad_active_notification_background);
+                                } else {
+                                    iv.setBackgroundResource(0);
+                                }
+                            } else {
+                                iv.setImageResource(R.drawable.ic_ad_morenotifications);
+                            }
+                            iv.setPadding(mIconPadding, mIconPadding, mIconPadding, mIconPadding);
+                            iv.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                            mOverflowNotifications.addView(iv, mOverflowLayoutParams);
+                        }
+                    }
+                } catch (RemoteException re) {
+                } catch (NameNotFoundException nnfe) {
+                }
+            }
+        });
+    }
+
+    private OnTouchListener mOverflowTouchListener = new OnTouchListener() {
+        int mLastChildPosition = -1;
+        @Override
+        public boolean onTouch(View v, MotionEvent event) {
+            int action = event.getActionMasked();
+            switch (action) {
+                case MotionEvent.ACTION_DOWN:
+                    mLastChildPosition = -1;
+                case MotionEvent.ACTION_MOVE:
+                    float x = event.getX();
+                    float y = event.getY();
+                    final int childCount = mOverflowNotifications.getChildCount();
+                    Rect hitRect = new Rect();
+                    for (int i = 0; i < childCount; i++) {
+                        final ImageView iv = (ImageView) mOverflowNotifications.getChildAt(i);
+                        final StatusBarNotification sbn = (StatusBarNotification) iv.getTag();
+                        iv.getHitRect(hitRect);
+                        if (i != mLastChildPosition ) {
+                            if (hitRect.contains((int)x, (int)y)) {
+                                mLastChildPosition = i;
+                                if (sbn != null) {
+                                    swapNotification(sbn);
+                                    iv.setBackgroundResource(R.drawable.ad_active_notification_background);
+                                }
+                            } else {
+                                iv.setBackgroundResource(0);
+                            }
+                        }
+                    }
+
+                    break;
+                case MotionEvent.ACTION_UP:
+                case MotionEvent.ACTION_CANCEL:
+                    inflateRemoteView(mNotification);
+                    break;
+            }
+            userActivity();
+            return true;
+        }
+    };
+
+    /**
+     * Swaps the current StatusBarNotification with {@code sbn}
+     * @param sbn The StatusBarNotification to swap with the current
+     */
+    private void swapNotification(StatusBarNotification sbn) {
+        mNotification = sbn;
+        setActiveNotification(sbn, false);
+    }
+
+    /**
+     * Determine if a given notification should be used.
+     * @param sbn StatusBarNotification to check.
+     * @return True if it should be used, false otherwise.
+     */
+    private boolean isValidNotification(StatusBarNotification sbn) {
+        return (sbn.isClearable() || mShowAllNotifications);
+    }
+
+    /**
+     * Determine if we should show notifications or not.
+     * @return True if we should show this view.
+     */
+    private boolean shouldShowNotification() {
+        return mProximityIsFar;
+    }
+
+    /**
+     * Wakes the device up and turns the screen on.
+     */
+    private void wakeDevice() {
+        try {
+            mPM.wakeUp(SystemClock.uptimeMillis());
+        } catch (RemoteException e) {
+        }
+        updateTimeoutTimer();
+    }
+
+    /**
+     * Determine i a call is currently in progress.
+     * @return True if a call is in progress.
+     */
+    private boolean isOnCall() {
+        TelephonyManager tm = (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
+        return tm.getCallState() != TelephonyManager.CALL_STATE_IDLE;
+    }
+
+    /**
+     * Sets {@code sbn} as the current notification inside the ring.
+     * @param sbn StatusBarNotification to be placed as the current one.
+     * @param updateOthers Set to true to update the overflow notifications.
+     */
+    private void setActiveNotification(final StatusBarNotification sbn, final boolean updateOthers) {
+        try {
+            Context pkgContext = mContext.createPackageContext(sbn.getPackageName(), Context.CONTEXT_RESTRICTED);
+            mNotificationDrawable = pkgContext.getResources().getDrawable(sbn.getNotification().icon);
+            mCurrentNotificationIcon.setImageDrawable(mNotificationDrawable);
+            setHandleText(sbn);
+            mGlowPadView.post(new Runnable() {
+                @Override
+                public void run() {
+                    updateResources();
+                    mGlowPadView.invalidate();
+                    if (updateOthers) updateOtherNotifications();
+                }
+            });
+        } catch (NameNotFoundException e) {
+        }
+    }
+
+    /**
+     * Inflates the RemoteViews specified by {@code sbn}.  If bigContentView is available it will be
+     * used otherwise the standard contentView will be inflated.
+     * @param sbn The StatusBarNotification to inflate content from.
+     */
+    private void inflateRemoteView(StatusBarNotification sbn) {
+        final Notification notification = sbn.getNotification();
+        boolean useBigContent = notification.bigContentView != null;
+        RemoteViews rv = useBigContent ? notification.bigContentView : notification.contentView;
+        if (rv != null) {
+            if (mRemoteView != null) mRemoteViewLayout.removeView(mRemoteView);
+            if (useBigContent)  {
+                rv.removeAllViews(com.android.internal.R.id.actions);
+                rv.setViewVisibility(com.android.internal.R.id.action_divider, View.GONE);
+                mRemoteViewLayoutParams.height = ViewGroup.LayoutParams.WRAP_CONTENT;
+            } else {
+                mRemoteViewLayoutParams.height = getResources().getDimensionPixelSize(R.dimen.notification_min_height);
+            }
+            mRemoteView = rv.apply(mContext, null);
+            mRemoteView.setAlpha(0f);
+            mRemoteViewLayout.addView(mRemoteView, mRemoteViewLayoutParams);
+        }
+    }
+
+    /**
+     * Sets the text to be displayed around the outside of the ring.
+     * @param sbn The StatusBarNotification to get the text from.
+     */
+    private void setHandleText(StatusBarNotification sbn) {
+        final Notification notificiation = sbn.getNotification();
+        CharSequence tickerText = mDisplayNotificationText ? notificiation.tickerText
+                : "";
+        if (tickerText == null) {
+            Bundle extras = notificiation.extras;
+            if (extras != null)
+                tickerText = extras.getCharSequence(Notification.EXTRA_TITLE, null);
+        }
+        mGlowPadView.setHandleText(tickerText != null ? tickerText.toString() : "");
+    }
+
+    /**
+     * Creates a drawable with the required states for the center ring handle
+     * @param handle Drawable to use as the base image
+     * @return A StateListDrawable with the appropriate states defined.
+     */
+    private Drawable createLockHandle(Drawable handle) {
+        StateListDrawable stateListDrawable = new StateListDrawable();
+        stateListDrawable.addState(TargetDrawable.STATE_INACTIVE, handle);
+        stateListDrawable.addState(TargetDrawable.STATE_ACTIVE, handle);
+        stateListDrawable.addState(TargetDrawable.STATE_FOCUSED, handle);
+        return stateListDrawable;
+    }
+
+    private SensorEventListener mSensorListener = new SensorEventListener() {
+        @Override
+        public void onSensorChanged(SensorEvent event) {
+            float value = event.values[0];
+            if (event.sensor.equals(mProximitySensor)) {
+                if (value >= mProximitySensor.getMaximumRange()) {
+                    mProximityIsFar = true;
+                    if (!isScreenOn() && mPocketModeEnabled && !isOnCall()) {
+                        mNotification = getNextAvailableNotification();
+                        if (mNotification != null) showNotification(mNotification, true);
+                    }
+                } else {
+                    mProximityIsFar = false;
+                }
+            } else if (event.sensor.equals(mLightSensor)) {
+            }
+        }
+
+        @Override
+        public void onAccuracyChanged(Sensor sensor, int accuracy) {
+        }
+    };
+
+    private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String action = intent.getAction();
+            if (ACTION_REDISPLAY_NOTIFICATION.equals(action)) {
+                mNotification = getNextAvailableNotification();
+                if (mNotification != null) showNotification(mNotification, true);
+            } else if (ACTION_DISPLAY_TIMEOUT.equals(action)) {
+                turnScreenOff();
+            } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                onScreenTurnedOff();
+            } else if (Intent.ACTION_SCREEN_ON.equals(action)) {
+                onScreenTurnedOn();
+            } else if (ACTION_FORCE_DISPLAY.equals(action)) {
+                mNotification = getNextAvailableNotification();
+                if (mNotification != null) showNotification(mNotification, true);
+                restoreBrightness();
+            }
+        }
+    };
+
+    /**
+     * Restarts the timer for re-displaying notifications.
+     */
+    private void updateRedisplayTimer() {
+        AlarmManager am = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
+        Intent i = new Intent(ACTION_REDISPLAY_NOTIFICATION);
+
+        PendingIntent pi = PendingIntent.getBroadcast(mContext, 0, i, PendingIntent.FLAG_UPDATE_CURRENT);
+        try {
+            am.cancel(pi);
+        } catch (Exception e) {
+        }
+        Calendar time = Calendar.getInstance();
+        time.setTimeInMillis(System.currentTimeMillis() + mRedisplayTimeout);
+        am.set(AlarmManager.RTC, time.getTimeInMillis(), pi);
+    }
+
+    /**
+     * Cancels the timer for re-displaying notifications.
+     */
+    private void cancelRedisplayTimer() {
+        AlarmManager am = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
+        Intent i = new Intent(ACTION_REDISPLAY_NOTIFICATION);
+
+        PendingIntent pi = PendingIntent.getBroadcast(mContext, 0, i, PendingIntent.FLAG_UPDATE_CURRENT);
+        try {
+            am.cancel(pi);
+        } catch (Exception e) {
+        }
+    }
+
+    /**
+     * Restarts the timeout timer used to turn the screen off.
+     */
+    private void updateTimeoutTimer() {
+        AlarmManager am = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
+        Intent i = new Intent(ACTION_DISPLAY_TIMEOUT);
+
+        PendingIntent pi = PendingIntent.getBroadcast(mContext, 0, i, PendingIntent.FLAG_UPDATE_CURRENT);
+        try {
+            am.cancel(pi);
+        } catch (Exception e) {
+        }
+        Calendar time = Calendar.getInstance();
+        time.setTimeInMillis(System.currentTimeMillis() + DISPLAY_TIMEOUT);
+        am.set(AlarmManager.RTC, time.getTimeInMillis(), pi);
+    }
+
+    /**
+     * Cancels the timeout timer used to turn the screen off.
+     */
+    private void cancelTimeoutTimer() {
+        AlarmManager am = (AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);
+        Intent i = new Intent(ACTION_DISPLAY_TIMEOUT);
+
+        PendingIntent pi = PendingIntent.getBroadcast(mContext, 0, i, PendingIntent.FLAG_UPDATE_CURRENT);
+        try {
+            am.cancel(pi);
+        } catch (Exception e) {
+        }
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ClockView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ClockView.java
new file mode 100644
index 0000000..775b214
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/ClockView.java
@@ -0,0 +1,293 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy.activedisplay;
+
+import android.content.BroadcastReceiver;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.database.ContentObserver;
+import android.graphics.Typeface;
+import android.os.Handler;
+import android.os.UserHandle;
+import android.provider.Settings;
+import android.text.format.DateFormat;
+import android.text.SpannableString;
+import android.text.style.StyleSpan;
+import android.text.style.TypefaceSpan;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import com.android.systemui.R;
+
+import java.lang.ref.WeakReference;
+import java.text.DateFormatSymbols;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+import libcore.icu.ICU;
+
+/**
+ * Displays the time
+ */
+public class ClockView extends RelativeLayout {
+    private final static String M12 = "h:mm";
+    private final static String M24 = "HH:mm";
+
+    private Calendar mCalendar;
+    private String mFormat;
+    private TextView mTimeView;
+    private TextView mDateView;
+    private AmPm mAmPm;
+    private SettingsObserver mSettingsObserver;
+    private ContentObserver mFormatChangeObserver;
+    private int mAttached = 0; // for debugging - tells us whether attach/detach is unbalanced
+
+    /* called by system on minute ticks */
+    private final Handler mHandler = new Handler();
+    private BroadcastReceiver mIntentReceiver;
+
+    private static class TimeChangedReceiver extends BroadcastReceiver {
+        private WeakReference<ClockView> mClock;
+        private Context mContext;
+
+        public TimeChangedReceiver(ClockView clock) {
+            mClock = new WeakReference<ClockView>(clock);
+            mContext = clock.getContext();
+        }
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            // Post a runnable to avoid blocking the broadcast.
+            final boolean timezoneChanged =
+                    intent.getAction().equals(Intent.ACTION_TIMEZONE_CHANGED);
+            final ClockView clock = mClock.get();
+            if (clock != null) {
+                clock.mHandler.post(new Runnable() {
+                    public void run() {
+                        if (timezoneChanged) {
+                            clock.mCalendar = Calendar.getInstance();
+                        }
+                        clock.updateTime();
+                    }
+                });
+            } else {
+                try {
+                    mContext.unregisterReceiver(this);
+                } catch (RuntimeException e) {
+                    // Shouldn't happen
+                }
+            }
+        }
+    };
+
+    static class AmPm {
+        private TextView mAmPmTextView;
+        private String mAmString, mPmString;
+
+        AmPm(View parent, Typeface tf) {
+            // No longer used, uncomment if we decide to use AM/PM indicator again
+            mAmPmTextView = (TextView) parent.findViewById(R.id.am_pm);
+            if (mAmPmTextView != null && tf != null) {
+                mAmPmTextView.setTypeface(tf);
+            }
+
+            String[] ampm = new DateFormatSymbols().getAmPmStrings();
+            mAmString = ampm[0];
+            mPmString = ampm[1];
+        }
+
+        void setShowAmPm(boolean show) {
+            if (mAmPmTextView != null) {
+                mAmPmTextView.setVisibility(show ? View.VISIBLE : View.GONE);
+            }
+        }
+
+        void setIsMorning(boolean isMorning) {
+            if (mAmPmTextView != null) {
+                mAmPmTextView.setText(isMorning ? mAmString : mPmString);
+            }
+        }
+    }
+
+    private static class FormatChangeObserver extends ContentObserver {
+        private WeakReference<ClockView> mClock;
+        private Context mContext;
+        public FormatChangeObserver(ClockView clock) {
+            super(new Handler());
+            mClock = new WeakReference<ClockView>(clock);
+            mContext = clock.getContext();
+        }
+        @Override
+        public void onChange(boolean selfChange) {
+            ClockView digitalClock = mClock.get();
+            if (digitalClock != null) {
+                digitalClock.setDateFormat();
+                digitalClock.updateTime();
+            } else {
+                try {
+                    mContext.getContentResolver().unregisterContentObserver(this);
+                } catch (RuntimeException e) {
+                    // Shouldn't happen
+                }
+            }
+        }
+    }
+
+    /**
+     * Class used to listen for changes to active display date/time settings
+     */
+    class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver =
+                    ClockView.this.mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_SHOW_AMPM), false, this);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.ACTIVE_DISPLAY_SHOW_DATE), false, this);
+            update();
+        }
+
+        void unobserve() {
+            ClockView.this.mContext.getContentResolver()
+                    .unregisterContentObserver(this);
+        }
+
+        @Override
+        public void onChange(boolean selfChange) {
+            update();
+        }
+
+        public void update() {
+            ContentResolver resolver =
+                    ClockView.this.mContext.getContentResolver();
+
+            boolean showAmPm = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_SHOW_AMPM, 0) == 1;
+            boolean showDate = Settings.System.getInt(
+                    resolver, Settings.System.ACTIVE_DISPLAY_SHOW_DATE, 0) == 1;
+
+            mAmPm.setShowAmPm(showAmPm);
+            mDateView.setVisibility(showDate ? View.VISIBLE : View.INVISIBLE);
+        }
+    }
+
+    public ClockView(Context context) {
+        this(context, null);
+    }
+
+    public ClockView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+        mTimeView = (TextView) findViewById(R.id.clock_text);
+        mDateView = (TextView) findViewById(R.id.date);
+        mAmPm = new AmPm(this, null);
+        mCalendar = Calendar.getInstance();
+        setDateFormat();
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+
+        mAttached++;
+
+        /* monitor time ticks, time changed, timezone */
+        if (mIntentReceiver == null) {
+            mIntentReceiver = new TimeChangedReceiver(this);
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(Intent.ACTION_TIME_TICK);
+            filter.addAction(Intent.ACTION_TIME_CHANGED);
+            filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
+            mContext.registerReceiverAsUser(mIntentReceiver, UserHandle.OWNER, filter, null, null );
+        }
+
+        /* monitor 12/24-hour display preference */
+        if (mFormatChangeObserver == null) {
+            mFormatChangeObserver = new FormatChangeObserver(this);
+            mContext.getContentResolver().registerContentObserver(
+                    Settings.System.CONTENT_URI, true, mFormatChangeObserver);
+        }
+        if (mSettingsObserver == null) {
+            mSettingsObserver = new SettingsObserver(new Handler());
+            mSettingsObserver.observe();
+        }
+
+        updateTime();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+
+        mAttached--;
+
+        if (mIntentReceiver != null) {
+            mContext.unregisterReceiver(mIntentReceiver);
+        }
+        if (mFormatChangeObserver != null) {
+            mContext.getContentResolver().unregisterContentObserver(
+                    mFormatChangeObserver);
+        }
+        if (mSettingsObserver != null) {
+            mSettingsObserver.unobserve();
+        }
+
+        mSettingsObserver = null;
+        mFormatChangeObserver = null;
+        mIntentReceiver = null;
+    }
+
+    void updateTime(Calendar c) {
+        mCalendar = c;
+        updateTime();
+    }
+
+    public void updateTime() {
+        mCalendar.setTimeInMillis(System.currentTimeMillis());
+
+        String newTime = DateFormat.format(mFormat, mCalendar).toString();
+        SpannableString span = new SpannableString(newTime);
+        int colonIndex = newTime.indexOf(':');
+        span.setSpan(new StyleSpan(Typeface.BOLD), 0, colonIndex, 0);
+        span.setSpan(new TypefaceSpan("sans-serif-thin"), colonIndex + 1, newTime.length(), 0);
+        mTimeView.setText(span);
+        mAmPm.setIsMorning(mCalendar.get(Calendar.AM_PM) == 0);
+        final String dateFormat = getContext().getString(R.string.ad_date_pattern);
+        final Locale l = Locale.getDefault();
+        String fmt = ICU.getBestDateTimePattern(dateFormat, l.toString());
+        SimpleDateFormat sdf = new SimpleDateFormat(fmt, l);
+        mDateView.setText(sdf.format(new Date()));
+    }
+
+    private void setDateFormat() {
+        mFormat = android.text.format.DateFormat.is24HourFormat(getContext()) ? M24 : M12;
+        mAmPm.setShowAmPm(mFormat.equals(M12));
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/DummyActivity.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/DummyActivity.java
new file mode 100644
index 0000000..e1b91d7
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/activedisplay/DummyActivity.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.systemui.statusbar.policy.activedisplay;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+
+public class DummyActivity extends Activity {
+
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+        setContentView(new View(this));
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) {
+        super.onWindowFocusChanged(hasFocus);
+        if (hasFocus)
+            finish();
+    }
+}
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
index f46ff7b..b2f4b6f 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/tablet/TabletStatusBar.java
@@ -678,6 +678,8 @@ public boolean onTouch(View v, MotionEvent ev) {
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         context.registerReceiver(mBroadcastReceiver, filter);
 
+        addActiveDisplayView();
+
         return sb;
     }
 
diff --git a/packages/SystemUI/tests/Android.mk b/packages/SystemUI/tests/Android.mk
deleted file mode 100644
index 28e4b86..0000000
--- a/packages/SystemUI/tests/Android.mk
+++ /dev/null
@@ -1,30 +0,0 @@
-# Copyright (C) 2011 The Android Open Source Project
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-LOCAL_PATH := $(call my-dir)
-include $(CLEAR_VARS)
-
-LOCAL_MODULE_TAGS := tests
-
-LOCAL_SRC_FILES := $(call all-java-files-under, src)
-
-LOCAL_JAVA_LIBRARIES := android.test.runner
-
-LOCAL_PACKAGE_NAME := SystemUITests
-
-# sign this with platform cert, so this test is allowed to inject key events into
-# UI it doesn't own. This is necessary to allow screenshots to be taken
-LOCAL_CERTIFICATE := platform
-
-include $(BUILD_PACKAGE)
diff --git a/packages/SystemUI/tests/AndroidManifest.xml b/packages/SystemUI/tests/AndroidManifest.xml
deleted file mode 100644
index e52806d..0000000
--- a/packages/SystemUI/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2011 The Android Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.systemui.tests">
-
-    <uses-permission android:name="android.permission.INJECT_EVENTS" />
-
-    <application>
-        <uses-library android:name="android.test.runner" />
-        <activity android:name="com.android.systemui.screenshot.ScreenshotStubActivity" />
-    </application>
-
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="com.android.systemui.tests"
-        android:label="Tests for SystemUI">
-    </instrumentation>
-</manifest>
diff --git a/packages/SystemUI/tests/res/layout/main.xml b/packages/SystemUI/tests/res/layout/main.xml
deleted file mode 100644
index 56dffe6..0000000
--- a/packages/SystemUI/tests/res/layout/main.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2011 The Android Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    >
-    <TextView
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="this is a test activity"
-    />
-    <EditText
-        android:layout_height="wrap_content"
-        android:id="@+id/editText1"
-        android:layout_width="match_parent">
-        <requestFocus></requestFocus>
-    </EditText>
-</LinearLayout>
diff --git a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java b/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
deleted file mode 100644
index 2935373..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotStubActivity.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2011 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.android.systemui.screenshot;
-
-import com.android.systemui.tests.R;
-
-import android.app.Activity;
-import android.os.Bundle;
-
-/**
- * A stub activity used in {@link ScreenshotTest}.
- */
-public class ScreenshotStubActivity extends Activity {
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-    }
-}
diff --git a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java b/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java
deleted file mode 100644
index a0bc4d7..0000000
--- a/packages/SystemUI/tests/src/com/android/systemui/screenshot/ScreenshotTest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Copyright (C) 2011 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.android.systemui.screenshot;
-
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Environment;
-import android.os.FileObserver;
-import android.test.ActivityInstrumentationTestCase2;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.util.Log;
-import android.view.KeyEvent;
-
-import java.io.File;
-
-/**
- * Functional tests for the global screenshot feature.
- */
-@LargeTest
-public class ScreenshotTest extends ActivityInstrumentationTestCase2<ScreenshotStubActivity> {
-
-    private static final String LOG_TAG = "ScreenshotTest";
-    private static final int SCREEN_WAIT_TIME_SEC = 5;
-
-    public ScreenshotTest() {
-        super(ScreenshotStubActivity.class);
-    }
-
-    /**
-     * A simple test for screenshots that launches an Activity, injects the key event combo
-     * to trigger the screenshot, and verifies the screenshot was taken successfully.
-     */
-    public void testScreenshot() throws Exception {
-        Log.d(LOG_TAG, "starting testScreenshot");
-        // launch the activity.
-        ScreenshotStubActivity activity = getActivity();
-        assertNotNull(activity);
-
-        File screenshotDir = getScreenshotDir();
-        NewScreenshotObserver observer = new NewScreenshotObserver(
-                screenshotDir.getAbsolutePath());
-        observer.startWatching();
-        takeScreenshot();
-        // unlikely, but check if a new screenshot file was already created
-        if (observer.getCreatedPath() == null) {
-            // wait for screenshot to be created
-            synchronized(observer) {
-                observer.wait(SCREEN_WAIT_TIME_SEC*1000);
-            }
-        }
-        assertNotNull(String.format("Could not find screenshot after %d seconds",
-                SCREEN_WAIT_TIME_SEC), observer.getCreatedPath());
-
-        File screenshotFile = new File(screenshotDir, observer.getCreatedPath());
-        try {
-            assertTrue(String.format("Detected new screenshot %s but its not a file",
-                    screenshotFile.getName()), screenshotFile.isFile());
-            assertTrue(String.format("Detected new screenshot %s but its not an image",
-                    screenshotFile.getName()), isValidImage(screenshotFile));
-        } finally {
-            // delete the file to prevent external storage from filing up
-            screenshotFile.delete();
-        }
-    }
-
-    private static class NewScreenshotObserver extends FileObserver {
-        private String mAddedPath = null;
-
-        NewScreenshotObserver(String path) {
-            super(path, FileObserver.CREATE);
-        }
-
-        synchronized String getCreatedPath() {
-            return mAddedPath;
-        }
-
-        @Override
-        public void onEvent(int event, String path) {
-            Log.d(LOG_TAG, String.format("Detected new file added %s", path));
-            synchronized (this) {
-                mAddedPath = path;
-                notify();
-            }
-        }
-    }
-
-    /**
-     * Inject the key sequence to take a screenshot.
-     */
-    private void takeScreenshot() {
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,
-                KeyEvent.KEYCODE_POWER));
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_DOWN,
-                KeyEvent.KEYCODE_VOLUME_DOWN));
-        // the volume down key event will cause the 'volume adjustment' UI to appear in the
-        // foreground, and steal UI focus
-        // unfortunately this means the next key event will get directed to the
-        // 'volume adjustment' UI, instead of this test's activity
-        // for this reason this test must be signed with platform certificate, to grant this test
-        // permission to inject key events to another process
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,
-                KeyEvent.KEYCODE_VOLUME_DOWN));
-        getInstrumentation().sendKeySync(new KeyEvent(KeyEvent.ACTION_UP,
-                KeyEvent.KEYCODE_POWER));
-    }
-
-    /**
-     * Get the directory where screenshot images are stored.
-     */
-    private File getScreenshotDir() {
-        // TODO: get this dir location from a constant
-        return new File(Environment.getExternalStorageDirectory(), "Pictures" + File.separator +
-                "Screenshots");
-    }
-
-    /**
-     * Return true if file is valid image file
-     */
-    private boolean isValidImage(File screenshotFile) {
-        Bitmap b = BitmapFactory.decodeFile(screenshotFile.getAbsolutePath());
-        // TODO: do more checks on image
-        return b != null;
-    }
-}
-- 
1.8.4

